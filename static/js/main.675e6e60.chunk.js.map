{"version":3,"sources":["App/logo.svg","Login/Login.tsx","Profile/Profile.tsx","App/App.tsx","index.tsx"],"names":["module","exports","web3","undefined","Login","state","loading","handleAuthenticate","publicAddress","signature","fetch","process","body","JSON","stringify","headers","method","then","response","json","handleClick","a","onLoggedIn","props","window","ethereum","alert","enable","Web3","eth","getCoinbase","coinbase","toLowerCase","setState","users","length","handleSignup","handleSignMessage","catch","err","nonce","personal","sign","Error","this","className","onClick","disabled","React","Component","Profile","user","username","handleChange","value","target","handleSubmit","accessToken","auth","id","Authorization","jwtDecode","payload","onLoggedOut","seed","htmlFor","name","onChange","LS_KEY","App","handleLoggedIn","localStorage","setItem","handleLoggedOut","removeItem","ls","getItem","parse","src","logo","alt","dotEnvConfig","path","ReactDOM","render","document","getElementById"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,+fCWvCC,OAAyBC,EAEhBC,EAAb,4MACCC,MAAQ,CACPC,SAAS,GAFX,EAKCC,mBAAqB,gBACpBC,EADoB,EACpBA,cACAC,EAFoB,EAEpBA,UAFoB,OAOpBC,MAAM,GAAD,OAAIC,wDAAJ,SAA8C,CAClDC,KAAMC,KAAKC,UAAU,CAAEN,gBAAeC,cACtCM,QAAS,CACR,eAAgB,oBAEjBC,OAAQ,SACNC,MAAK,SAACC,GAAD,OAAcA,EAASC,WAlBjC,EAoBCC,YApBD,sBAoBe,gCAAAC,EAAA,yDACLC,EAAe,EAAKC,MAApBD,WAGFE,OAAeC,SAJR,uBAKZD,OAAOE,MAAM,kCALD,6BASRxB,EATQ,0CAYJsB,OAAeC,SAASE,SAZpB,OAgBXzB,EAAO,IAAI0B,IAAMJ,OAAeC,UAhBrB,yDAkBXD,OAAOE,MAAM,+BAlBF,4CAuBUxB,EAAK2B,IAAIC,cAvBnB,WAuBPC,EAvBO,+BAyBZP,OAAOE,MAAM,mCAzBD,2BA6BPlB,EAAgBuB,EAASC,cAC/B,EAAKC,SAAS,CAAE3B,SAAS,IAGzBI,MAAM,GAAD,OACDC,wDADC,gCACwDH,IAE3DS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACiB,GAAD,OACLA,EAAMC,OAASD,EAAM,GAAK,EAAKE,aAAa5B,MAG5CS,KAAK,EAAKoB,mBAEVpB,KAAK,EAAKV,oBAEVU,KAAKK,GACLgB,OAAM,SAACC,GACPf,OAAOE,MAAMa,GACb,EAAKN,SAAS,CAAE3B,SAAS,OAjDd,0DApBf,EAyEC+B,kBAzED,uCAyEqB,iCAAAhB,EAAA,6DACnBb,EADmB,EACnBA,cACAgC,EAFmB,EAEnBA,MAFmB,kBAQMtC,EAAM2B,IAAIY,SAASC,KAAnB,0CACYF,GACnChC,EACA,IAXiB,cAQZC,EARY,yBAcX,CAAED,gBAAeC,cAdN,sCAgBZ,IAAIkC,MACT,sDAjBiB,yDAzErB,wDA+FCP,aAAe,SAAC5B,GACf,OAAOE,MAAM,GAAD,OAAIC,wDAAJ,UAA+C,CAC1DC,KAAMC,KAAKC,UAAU,CAAEN,kBACvBO,QAAS,CACR,eAAgB,oBAEjBC,OAAQ,SACNC,MAAK,SAACC,GAAD,OAAcA,EAASC,WAtGjC,uDAyGW,IACDb,EAAYsC,KAAKvC,MAAjBC,QACR,OACC,6BACC,8DAEC,6BAFD,qEAMA,4BACCuC,UAAU,wBACVC,QAASF,KAAKxB,aAEbd,EAAU,aAAe,uBAE3B,4BAAQuC,UAAU,wBAAwBE,UAAQ,GAAlD,uBAGA,4BAAQF,UAAU,2BAA2BE,UAAQ,GAArD,yBA5HJ,GAA2BC,IAAMC,W,oCCgBpBC,EAAb,4MACC7C,MAAe,CACdC,SAAS,EACT6C,UAAMhD,EACNiD,SAAU,IAJZ,EAyBCC,aAAe,YAE6B,IADjCC,EACgC,EAD1CC,OAAUD,MAEV,EAAKrB,SAAS,CAAEmB,SAAUE,KA5B5B,EA+BCE,aAAe,WAAO,IAEZC,EACL,EAAKlC,MADRmC,KAAQD,YAFW,EAIO,EAAKpD,MAAxB8C,EAJY,EAIZA,KAAMC,EAJM,EAINA,SAEd,EAAKnB,SAAS,CAAE3B,SAAS,IAEpB6C,EAOLzC,MAAM,GAAD,OAAIC,wDAAJ,kBAA+CwC,EAAKQ,IAAM,CAC9D/C,KAAMC,KAAKC,UAAU,CAAEsC,aACvBrC,QAAS,CACR6C,cAAc,UAAD,OAAYH,GACzB,eAAgB,oBAEjBzC,OAAQ,UAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACkC,GAAD,OAAU,EAAKlB,SAAS,CAAE3B,SAAS,EAAO6C,YAC/Cb,OAAM,SAACC,GACPf,OAAOE,MAAMa,GACb,EAAKN,SAAS,CAAE3B,SAAS,OAlB1BkB,OAAOE,MACN,yEAzCJ,kEAOsB,IAAD,OAEV+B,EACLb,KAAKrB,MADRmC,KAAQD,YAGGE,EACRE,YAAsBJ,GADzBK,QAAWH,GAGZjD,MAAM,GAAD,OAAIC,wDAAJ,kBAA+CgD,GAAM,CACzD5C,QAAS,CACR6C,cAAc,UAAD,OAAYH,MAGzBxC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACkC,GAAD,OAAU,EAAKlB,SAAS,CAAEkB,YAC/Bb,MAAMd,OAAOE,SAtBjB,+BA8DW,IAAD,EAIJkB,KAAKrB,MAFAkC,EAFD,EAEPC,KAAQD,YACRM,EAHO,EAGPA,YAGWvD,EACRqD,YAAsBJ,GADzBK,QAAWtD,cANJ,EAQkBoC,KAAKvC,MAAvBC,EARA,EAQAA,QAAS6C,EART,EAQSA,KAEXC,EAAWD,GAAQA,EAAKC,SAE9B,OACC,yBAAKP,UAAU,WACd,2CACc,kBAAC,IAAD,CAAUmB,KAAMxD,KAE9B,8CACgB,IACd4C,EAAW,6BAAMA,GAAkB,WAFrC,wBAGkB,6BAAM5C,IAExB,6BACC,2BAAOyD,QAAQ,YAAf,qBACA,2BAAOC,KAAK,WAAWC,SAAUvB,KAAKS,eACtC,4BAAQN,SAAUzC,EAASwC,QAASF,KAAKY,cAAzC,WAID,2BACC,4BAAQV,QAASiB,GAAjB,gBA5FL,GAA6Bf,IAAMC,W,kBCpB7BmB,EAAS,2BAMFC,EAAb,4MACChE,MAAe,GADhB,EAYCiE,eAAiB,SAACZ,GACjBa,aAAaC,QAAQJ,EAAQvD,KAAKC,UAAU4C,IAC5C,EAAKzB,SAAS,CAAEyB,UAdlB,EAiBCe,gBAAkB,WACjBF,aAAaG,WAAWN,GACxB,EAAKnC,SAAS,CAAEyB,UAAMvD,KAnBxB,kEAKE,IAAMwE,EAAKnD,OAAO+C,aAAaK,QAAQR,GACjCV,EAAOiB,GAAM9D,KAAKgE,MAAMF,GAC9B/B,KAAKX,SAAS,CACbyB,WARH,+BAsBW,IACDA,EAASd,KAAKvC,MAAdqD,KAER,OACC,yBAAKb,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKiC,IAAKC,IAAMlC,UAAU,WAAWmC,IAAI,SACzC,wBAAInC,UAAU,aAAd,wCAID,yBAAKA,UAAU,aACba,EACA,kBAAC,EAAD,CACCA,KAAMA,EACNK,YAAanB,KAAK6B,kBAGnB,kBAAC,EAAD,CAAOnD,WAAYsB,KAAK0B,uBAxC9B,GAAyBtB,IAAMC,WCN/BgC,iBAAa,CACZC,KAEI,oBAILC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.675e6e60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import './Login.css';\n\nimport React from 'react';\nimport Web3 from 'web3';\n\nimport { Auth } from '../types';\n\ninterface Props {\n\tonLoggedIn: (auth: Auth) => void;\n}\n\nlet web3: Web3 | undefined = undefined; // Will hold the web3 instance\n\nexport class Login extends React.Component<Props> {\n\tstate = {\n\t\tloading: false, // Loading button state\n\t};\n\n\thandleAuthenticate = ({\n\t\tpublicAddress,\n\t\tsignature,\n\t}: {\n\t\tpublicAddress: string;\n\t\tsignature: string;\n\t}) =>\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/auth`, {\n\t\t\tbody: JSON.stringify({ publicAddress, signature }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\n\thandleClick = async () => {\n\t\tconst { onLoggedIn } = this.props;\n\n\t\t// Check if MetaMask is installed\n\t\tif (!(window as any).ethereum) {\n\t\t\twindow.alert('Please install MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!web3) {\n\t\t\ttry {\n\t\t\t\t// Request account access if needed\n\t\t\t\tawait (window as any).ethereum.enable();\n\n\t\t\t\t// We don't know window.web3 version, so we use our own instance of Web3\n\t\t\t\t// with the injected provider given by MetaMask\n\t\t\t\tweb3 = new Web3((window as any).ethereum);\n\t\t\t} catch (error) {\n\t\t\t\twindow.alert('You need to allow MetaMask.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst coinbase = await web3.eth.getCoinbase();\n\t\tif (!coinbase) {\n\t\t\twindow.alert('Please activate MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst publicAddress = coinbase.toLowerCase();\n\t\tthis.setState({ loading: true });\n\n\t\t// Look if user with current publicAddress is already present on backend\n\t\tfetch(\n\t\t\t`${process.env.REACT_APP_BACKEND_URL}/users?publicAddress=${publicAddress}`\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t// If yes, retrieve it. If no, create it.\n\t\t\t.then((users) =>\n\t\t\t\tusers.length ? users[0] : this.handleSignup(publicAddress)\n\t\t\t)\n\t\t\t// Popup MetaMask confirmation modal to sign message\n\t\t\t.then(this.handleSignMessage)\n\t\t\t// Send signature to backend on the /auth route\n\t\t\t.then(this.handleAuthenticate)\n\t\t\t// Pass accessToken back to parent component (to save it in localStorage)\n\t\t\t.then(onLoggedIn)\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tthis.setState({ loading: false });\n\t\t\t});\n\t};\n\n\thandleSignMessage = async ({\n\t\tpublicAddress,\n\t\tnonce,\n\t}: {\n\t\tpublicAddress: string;\n\t\tnonce: string;\n\t}) => {\n\t\ttry {\n\t\t\tconst signature = await web3!.eth.personal.sign(\n\t\t\t\t`I am signing my one-time nonce: ${nonce}`,\n\t\t\t\tpublicAddress,\n\t\t\t\t'' // MetaMask will ignore the password argument here\n\t\t\t);\n\n\t\t\treturn { publicAddress, signature };\n\t\t} catch (err) {\n\t\t\tthrow new Error(\n\t\t\t\t'You need to sign the message to be able to log in.'\n\t\t\t);\n\t\t}\n\t};\n\n\thandleSignup = (publicAddress: string) => {\n\t\treturn fetch(`${process.env.REACT_APP_BACKEND_URL}/users`, {\n\t\t\tbody: JSON.stringify({ publicAddress }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\t};\n\n\trender() {\n\t\tconst { loading } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tPlease select your login method.\n\t\t\t\t\t<br />\n\t\t\t\t\tFor the purpose of this demo, only MetaMask login is\n\t\t\t\t\timplemented.\n\t\t\t\t</p>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"Login-button Login-mm\"\n\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t>\n\t\t\t\t\t{loading ? 'Loading...' : 'Login with MetaMask'}\n\t\t\t\t</button>\n\t\t\t\t<button className=\"Login-button Login-fb\" disabled>\n\t\t\t\t\tLogin with Facebook\n\t\t\t\t</button>\n\t\t\t\t<button className=\"Login-button Login-email\" disabled>\n\t\t\t\t\tLogin with Email\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './Profile.css';\n\nimport jwtDecode from 'jwt-decode';\nimport React from 'react';\nimport Blockies from 'react-blockies';\n\nimport { Auth } from '../types';\n\ninterface Props {\n\tauth: Auth;\n\tonLoggedOut: () => void;\n}\n\ninterface State {\n\tloading: boolean;\n\tuser?: {\n\t\tid: number;\n\t\tusername: string;\n\t};\n\tusername: string;\n}\n\ninterface JwtDecoded {\n\tpayload: {\n\t\tid: string;\n\t\tpublicAddress: string;\n\t};\n}\n\nexport class Profile extends React.Component<Props, State> {\n\tstate: State = {\n\t\tloading: false,\n\t\tuser: undefined,\n\t\tusername: '',\n\t};\n\n\tcomponentDidMount() {\n\t\tconst {\n\t\t\tauth: { accessToken },\n\t\t} = this.props;\n\t\tconst {\n\t\t\tpayload: { id },\n\t\t} = jwtDecode<JwtDecoded>(accessToken);\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${id}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => this.setState({ user }))\n\t\t\t.catch(window.alert);\n\t}\n\n\thandleChange = ({\n\t\ttarget: { value },\n\t}: React.ChangeEvent<HTMLInputElement>) => {\n\t\tthis.setState({ username: value });\n\t};\n\n\thandleSubmit = () => {\n\t\tconst {\n\t\t\tauth: { accessToken },\n\t\t} = this.props;\n\t\tconst { user, username } = this.state;\n\n\t\tthis.setState({ loading: true });\n\n\t\tif (!user) {\n\t\t\twindow.alert(\n\t\t\t\t'The user id has not been fetched yet. Please try again in 5 seconds.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${user.id}`, {\n\t\t\tbody: JSON.stringify({ username }),\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => this.setState({ loading: false, user }))\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tthis.setState({ loading: false });\n\t\t\t});\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tauth: { accessToken },\n\t\t\tonLoggedOut,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tpayload: { publicAddress },\n\t\t} = jwtDecode<JwtDecoded>(accessToken);\n\t\tconst { loading, user } = this.state;\n\n\t\tconst username = user && user.username;\n\n\t\treturn (\n\t\t\t<div className=\"Profile\">\n\t\t\t\t<p>\n\t\t\t\t\tLogged in as <Blockies seed={publicAddress} />\n\t\t\t\t</p>\n\t\t\t\t<div>\n\t\t\t\t\tMy username is{' '}\n\t\t\t\t\t{username ? <pre>{username}</pre> : 'not set.'} My\n\t\t\t\t\tpublicAddress is <pre>{publicAddress}</pre>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label htmlFor=\"username\">Change username: </label>\n\t\t\t\t\t<input name=\"username\" onChange={this.handleChange} />\n\t\t\t\t\t<button disabled={loading} onClick={this.handleSubmit}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\t<button onClick={onLoggedOut}>Logout</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './App.css';\n\nimport React from 'react';\n\nimport { Login } from '../Login';\nimport { Profile } from '../Profile/Profile';\nimport { Auth } from '../types';\nimport logo from './logo.svg';\n\nconst LS_KEY = 'login-with-metamask:auth';\n\ninterface State {\n\tauth?: Auth;\n}\n\nexport class App extends React.Component<unknown, State> {\n\tstate: State = {};\n\n\tcomponentDidMount() {\n\t\t// Access token is stored in localstorage\n\t\tconst ls = window.localStorage.getItem(LS_KEY);\n\t\tconst auth = ls && JSON.parse(ls);\n\t\tthis.setState({\n\t\t\tauth,\n\t\t});\n\t}\n\n\thandleLoggedIn = (auth: Auth) => {\n\t\tlocalStorage.setItem(LS_KEY, JSON.stringify(auth));\n\t\tthis.setState({ auth });\n\t};\n\n\thandleLoggedOut = () => {\n\t\tlocalStorage.removeItem(LS_KEY);\n\t\tthis.setState({ auth: undefined });\n\t};\n\n\trender() {\n\t\tconst { auth } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<h1 className=\"App-title\">\n\t\t\t\t\t\tWelcome to Login with MetaMask Demo\n\t\t\t\t\t</h1>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"App-intro\">\n\t\t\t\t\t{auth ? (\n\t\t\t\t\t\t<Profile\n\t\t\t\t\t\t\tauth={auth}\n\t\t\t\t\t\t\tonLoggedOut={this.handleLoggedOut}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Login onLoggedIn={this.handleLoggedIn} />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './index.css';\n\nimport { config as dotEnvConfig } from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\n// Load ENV variables\ndotEnvConfig({\n\tpath:\n\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t? '.env.production'\n\t\t\t: '.env.development',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}